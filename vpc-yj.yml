AWSTemplateFormatVersion: 2010-09-09
Description: This template creates VPC with Public and Private Subnet.
Metadata:
 AWS::CloudFormation::Interface:
  ParameterGroups:
   -
    Label:
     default: "VPC CIDR"
     Parameters:
      - VpcCIDR
   -
    Label:
     default: "Subnet CIDR"
     Parameters:
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
      - PrivateSubnet1CIDR
      - PrivateSubnet2CIDR
   -
    Label:
     default: "SSH CIDR"
     Parameters:
      - SSHLocation
Parameters:
  # Subnets
  VpcCIDR:
    Description: 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: The IP range (CIDR notation) for the private subnet 1
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: The IP range (CIDR notation) for the private subnet 2
    Type: String
    Default: 10.0.4.0/24
  
  SSHLocation:
    Description: The IP address range that can be used to access the web server using SSH
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
#Create a VPC
 VPC:
   Type: 'AWS::EC2::VPC'
   Properties:
     CidrBlock: !Ref VpcCIDR
     EnableDnsHostnames: true
     EnableDnsSupport: true
     InstanceTenancy: default
     Tags: 
     - Key: Name
       Value: RackspaceEvaluatingVPC
#Create a InternetGateway   
 InternetGateway:
   Type: 'AWS::EC2::InternetGateway'
   #DependsOn: VPC
   Properties:
     Tags: 
     - Key: Name
       Value: RackspaceEvaluatingIGW
# Attach Internet Gateway to VPC
 VPCGatewayAttachment:
   Type: 'AWS::EC2::VPCGatewayAttachment'
   Properties:
     VpcId: !Ref VPC
     InternetGatewayId: !Ref InternetGateway
# Create a Public Subnet in first AZ
 PublicSubnet1:
   Type: 'AWS::EC2::Subnet'
   Properties:
     AvailabilityZone: !Select [0, !GetAZs '' ]
     CidrBlock: !Ref PublicSubnet1CIDR
     MapPublicIpOnLaunch: true
     VpcId: !Ref VPC    
     Tags: 
     - Key: Name
       Value: Public Subnet 1
# Create a Public Subnet in second AZ
 PublicSubnet2:
   Type: 'AWS::EC2::Subnet'
   Properties:
     AvailabilityZone: !Select [1, !GetAZs '']
     CidrBlock: !Ref PublicSubnet2CIDR
     MapPublicIpOnLaunch: true
     VpcId: !Ref VPC
     Tags: 
     - Key: Name
       Value: Public Subnet 2
# Create Route Table
 PublicRouteTable:
   Type: 'AWS::EC2::RouteTable'
   Properties:
     VpcId: !Ref VPC    
     Tags: 
     - Key: Name
       Value: Public Route Table
#Add a Public Route to the Route Table 
 PublicRoute:
   Type: 'AWS::EC2::Route'
   Properties:
     DestinationCidrBlock: 0.0.0.0/0
     GatewayId: !Ref InternetGateway
     RouteTableId: !Ref PublicRouteTable   
#Associate Public Subnet1 with Public Route Table
 PublicSubnet1RouteTableAssociation:
   Type: 'AWS::EC2::SubnetRouteTableAssociation'
   Properties:
    RouteTableId: !Ref PublicRouteTable
    SubnetId: !Ref PublicSubnet1
#Associate Public Subnet2 with Public Route Table
 PublicSubnet2RouteTableAssociation:
   Type: 'AWS::EC2::SubnetRouteTableAssociation'
   Properties:
    RouteTableId: !Ref PublicRouteTable
    SubnetId: !Ref PublicSubnet2
#Create a Private Subnet 1
 PrivateSubnet1:
   Type: 'AWS::EC2::Subnet'
   Properties:
     AvailabilityZone: !Select [0, !GetAZs '']
     CidrBlock: !Ref PrivateSubnet1CIDR
     MapPublicIpOnLaunch: false
     VpcId: !Ref VPC    
     Tags: 
     - Key: Name
       Value: Private Subnet 1 | App Tier
#Create a Private Subnet 2
 PrivateSubnet2:
   Type: 'AWS::EC2::Subnet'
   Properties:
     AvailabilityZone: !Select [1, !GetAZs '']
     CidrBlock: !Ref PrivateSubnet2CIDR
     MapPublicIpOnLaunch: false
     VpcId: !Ref VPC    
     Tags: 
     - Key: Name
       Value: Private Subnet 2 | App Tier
#Create Security Group for the Application Load Balancer
 ALBSecurityGroup:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
     VpcId: !Ref VPC
     GroupDescription: Enable HTTP/HTTPS access on port 80/443
     SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
     Tags: 
      - Key: Name
        Value: ALB Security Group
 SSHSecurityGroup:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
     VpcId: !Ref VPC
     GroupDescription: Enable SSH access via port 22
     SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
     Tags: 
      - Key: Name
        Value: SSH Security Group
 WebServerSecurityGroup:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
     VpcId: !Ref VPC
     GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down to the load balancer
     SecurityGroupIngress:
     - FromPort: 80
       IpProtocol: tcp
       ToPort: 80
       SourceSecurityGroupId: !Ref ALBSecurityGroup
     - FromPort: 443
       IpProtocol: tcp
       ToPort: 443
       SourceSecurityGroupId: !Ref ALBSecurityGroup
     - FromPort: 22
       IpProtocol: tcp
       ToPort: 22
       SourceSecurityGroupId: !Ref SSHSecurityGroup
     Tags: 
     - Key: Name
       Value: WebServer Security Group

Outputs:
 VPC:
   Description: VPC ID
   Export:
     Name: !Sub "${AWS::StackName}-VPCID"
   Value: !Ref VPC

 PublicSubnet1:
   Description: Public Subnet 1 ID
   Export:
     Name: !Sub "${AWS::StackName}-PublicSubnet1"
   Value: !Ref PublicSubnet1

 PublicSubnet2:
   Description: Public Subnet 2 ID
   Export:
     Name: !Sub "${AWS::StackName}-PublicSubnet2"
   Value: !Ref PublicSubnet2

 PrivateSubnet1:
   Description: Private Subnet 1 ID
   Export:
     Name: !Sub "${AWS::StackName}-PrivateSubnet1"
   Value: !Ref PrivateSubnet1

 PrivateSubnet2:
   Description: Private Subnet 2 ID
   Export:
     Name: !Sub "${AWS::StackName}-PrivateSubnet2"
   Value: !Ref PrivateSubnet2

 ALBSecurityGroup:
   Description: Application Load Balancer Security Group ID
   Export:
     Name: !Sub "${AWS::StackName}-ALBSecurityGroup"
   Value: !Ref ALBSecurityGroup

 SSHSecurityGroup:
   Description: SSH Security Group ID
   Export:
     Name: !Sub "${AWS::StackName}-SSHSecurityGroup"
   Value: !Ref SSHSecurityGroup

 WebServerSecurityGroup:
   Description: WebServer Security Group ID
   Export:
     Name: !Sub "${AWS::StackName}-WebServerSecurityGroup"
   Value: !Ref WebServerSecurityGroup
